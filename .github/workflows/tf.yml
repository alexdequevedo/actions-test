name: 'Terraform'

on:
  pull_request:
  workflow_dispatch:

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write


    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Cache dependencies
      id: cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.terraform.d/plugin-cache
          ~/.cache/tfsec
        key: ${{ runner.os }}-terraform-${{ hashFiles('**/lockfiles') }}

    # - name: Dump Context
    #   run: echo ${{ github.context }}

    # Need to find how to exclude certain rules
    - name: Run tfsec
      id: tfsec
      uses: aquasecurity/tfsec-action@v1.0.0
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        # additional_args: "-e google-storage-bucket-encryption-customer-key "
      #   format: json
      #   out: tfsec-results.json
      continue-on-error: true

    # - name: Write TFSEC to Step Summary
    #   run: |
    #     echo "### Tfsec results" >> $GITHUB_STEP_SUMMARY
    #     cat tfsec-results.json >> $GITHUB_STEP_SUMMARY


    - name: Test with Checkov
      id: checkov
      uses: bridgecrewio/checkov-action@v12
      with:
        directory: ./
        framework: terraform
        output_format: json
        output_file_path: reports/checkov-results.json
      continue-on-error: true

    - name: Upload Checkov Results
      uses: actions/upload-artifact@v3
      with:
        name: checkov-results.json
        path: reports/checkov-results.json

    - name: 'GCP Auth'
      uses: 'google-github-actions/auth@v0'
      with:
        credentials_json: '${{ secrets.GCP_TF_CREDENTAILS }}'
        service_account: 'terraform-service-account@gcp-three-tier-ref-app.iam.gserviceaccount.com'

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color -input=false
      continue-on-error: true
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_TF_CREDENTIALS }}

    - name: Update Pull Request
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        TFSEC: "TFSEC\n${{ steps.tfsec.outputs.stdout }}"
        CHECKOV: "CHECKOV\n${{ steps.checkov.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { owner, repo } = context.repo;
          const runId = context.runId;


          const output = `
          #### Tfsec \`${{ steps.tfsec.outcome }}\`
          #### Checkov \`${{ steps.checkov.outcome }}\`
          #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan, Tfsec, Checkov</summary>

          \`\`\`\n
          ${process.env.PLAN}
          ${process.env.TFSEC}
          ${process.env.CHECKOV}
          \`\`\`

          </details>

          Link to the workflow run can be found [here](https://github.com/${owner}/${repo}/actions/runs/${runId})

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
